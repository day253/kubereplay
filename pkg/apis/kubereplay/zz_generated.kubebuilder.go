package kubereplay

import (
	"fmt"

	"github.com/kubernetes-sigs/kubebuilder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalHarvester = builders.NewInternalResource(
		"harvesters",
		"Harvester",
		func() runtime.Object { return &Harvester{} },
		func() runtime.Object { return &HarvesterList{} },
	)
	InternalHarvesterStatus = builders.NewInternalResourceStatus(
		"harvesters",
		"HarvesterStatus",
		func() runtime.Object { return &Harvester{} },
		func() runtime.Object { return &HarvesterList{} },
	)
	InternalRefinery = builders.NewInternalResource(
		"refineries",
		"Refinery",
		func() runtime.Object { return &Refinery{} },
		func() runtime.Object { return &RefineryList{} },
	)
	InternalRefineryStatus = builders.NewInternalResourceStatus(
		"refineries",
		"RefineryStatus",
		func() runtime.Object { return &Refinery{} },
		func() runtime.Object { return &RefineryList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("kubereplay.lwolf.org").WithKinds(
		InternalHarvester,
		InternalHarvesterStatus,
		InternalRefinery,
		InternalRefineryStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Harvester struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   HarvesterSpec
	Status HarvesterStatus
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Refinery struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   RefinerySpec
	Status RefineryStatus
}

type HarvesterStatus struct {
}

type RefineryStatus struct {
	Deployed bool
}

type RefinerySpec struct {
	Workers int32
	Timeout string
	Storage *RefineryStorage
}

type HarvesterSpec struct {
	Selector    map[string]string
	AppPort     uint32
	Refinery    string
	SegmentSize uint32
}

type RefineryStorage struct {
	File          *FileSilo
	Tcp           *TcpSilo
	Stdout        *StdoutSilo
	Http          *HttpSilo
	Elasticsearch *ElasticsearchSilo
	Kafka         *KafkaSilo
}

type FileSilo struct {
	Enabled       bool
	Filename      string
	Append        bool
	FlushInterval string
	QueueSize     int32
	FileLimit     string
}

type KafkaSilo struct {
	Enabled bool
	Uri     string
	Json    bool
	Topic   string
}

type ElasticsearchSilo struct {
	Enabled bool
	Uri     string
}

type HttpSilo struct {
	Enabled        bool
	Uri            string
	Debug          bool
	ResponseBuffer int
}

type StdoutSilo struct {
	Enabled bool
}

type TcpSilo struct {
	Enabled bool
	Uri     string
}

//
// Harvester Functions and Structs
//
// +k8s:deepcopy-gen=false
type HarvesterStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type HarvesterStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type HarvesterList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Harvester
}

func (Harvester) NewStatus() interface{} {
	return HarvesterStatus{}
}

func (pc *Harvester) GetStatus() interface{} {
	return pc.Status
}

func (pc *Harvester) SetStatus(s interface{}) {
	pc.Status = s.(HarvesterStatus)
}

func (pc *Harvester) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Harvester) SetSpec(s interface{}) {
	pc.Spec = s.(HarvesterSpec)
}

func (pc *Harvester) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Harvester) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Harvester) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Harvester.
// +k8s:deepcopy-gen=false
type HarvesterRegistry interface {
	ListHarvesters(ctx request.Context, options *internalversion.ListOptions) (*HarvesterList, error)
	GetHarvester(ctx request.Context, id string, options *metav1.GetOptions) (*Harvester, error)
	CreateHarvester(ctx request.Context, id *Harvester) (*Harvester, error)
	UpdateHarvester(ctx request.Context, id *Harvester) (*Harvester, error)
	DeleteHarvester(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewHarvesterRegistry(sp builders.StandardStorageProvider) HarvesterRegistry {
	return &storageHarvester{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageHarvester struct {
	builders.StandardStorageProvider
}

func (s *storageHarvester) ListHarvesters(ctx request.Context, options *internalversion.ListOptions) (*HarvesterList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*HarvesterList), err
}

func (s *storageHarvester) GetHarvester(ctx request.Context, id string, options *metav1.GetOptions) (*Harvester, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Harvester), nil
}

func (s *storageHarvester) CreateHarvester(ctx request.Context, object *Harvester) (*Harvester, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Harvester), nil
}

func (s *storageHarvester) UpdateHarvester(ctx request.Context, object *Harvester) (*Harvester, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Harvester), nil
}

func (s *storageHarvester) DeleteHarvester(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}

//
// Refinery Functions and Structs
//
// +k8s:deepcopy-gen=false
type RefineryStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type RefineryStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type RefineryList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Refinery
}

func (Refinery) NewStatus() interface{} {
	return RefineryStatus{}
}

func (pc *Refinery) GetStatus() interface{} {
	return pc.Status
}

func (pc *Refinery) SetStatus(s interface{}) {
	pc.Status = s.(RefineryStatus)
}

func (pc *Refinery) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Refinery) SetSpec(s interface{}) {
	pc.Spec = s.(RefinerySpec)
}

func (pc *Refinery) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Refinery) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Refinery) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Refinery.
// +k8s:deepcopy-gen=false
type RefineryRegistry interface {
	ListRefinerys(ctx request.Context, options *internalversion.ListOptions) (*RefineryList, error)
	GetRefinery(ctx request.Context, id string, options *metav1.GetOptions) (*Refinery, error)
	CreateRefinery(ctx request.Context, id *Refinery) (*Refinery, error)
	UpdateRefinery(ctx request.Context, id *Refinery) (*Refinery, error)
	DeleteRefinery(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewRefineryRegistry(sp builders.StandardStorageProvider) RefineryRegistry {
	return &storageRefinery{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageRefinery struct {
	builders.StandardStorageProvider
}

func (s *storageRefinery) ListRefinerys(ctx request.Context, options *internalversion.ListOptions) (*RefineryList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*RefineryList), err
}

func (s *storageRefinery) GetRefinery(ctx request.Context, id string, options *metav1.GetOptions) (*Refinery, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Refinery), nil
}

func (s *storageRefinery) CreateRefinery(ctx request.Context, object *Refinery) (*Refinery, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Refinery), nil
}

func (s *storageRefinery) UpdateRefinery(ctx request.Context, object *Refinery) (*Refinery, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Refinery), nil
}

func (s *storageRefinery) DeleteRefinery(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
