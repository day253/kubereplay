// This file was automatically generated by informer-gen

package v1alpha1

import (
	kubereplay_v1alpha1 "github.com/lwolf/kubereplay/pkg/apis/kubereplay/v1alpha1"
	"github.com/lwolf/kubereplay/pkg/client/clientset_generated/clientset"
	"github.com/lwolf/kubereplay/pkg/client/informers_generated/externalversions/internalinterfaces"
	"github.com/lwolf/kubereplay/pkg/client/listers_generated/kubereplay/v1alpha1"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
	"time"
)

// RefineryInformer provides access to a shared informer and lister for
// Refineries.
type RefineryInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.RefineryLister
}

type refineryInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewRefineryInformer constructs a new informer for Refinery type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewRefineryInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredRefineryInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredRefineryInformer constructs a new informer for Refinery type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredRefineryInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubereplayV1alpha1().Refineries(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KubereplayV1alpha1().Refineries(namespace).Watch(options)
			},
		},
		&kubereplay_v1alpha1.Refinery{},
		resyncPeriod,
		indexers,
	)
}

func (f *refineryInformer) defaultInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredRefineryInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *refineryInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kubereplay_v1alpha1.Refinery{}, f.defaultInformer)
}

func (f *refineryInformer) Lister() v1alpha1.RefineryLister {
	return v1alpha1.NewRefineryLister(f.Informer().GetIndexer())
}
