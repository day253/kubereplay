/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/lwolf/kube-replay/pkg/apis/replay/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SiloLister helps list Silos.
type SiloLister interface {
	// List lists all Silos in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Silo, err error)
	// Silos returns an object that can list and get Silos.
	Silos(namespace string) SiloNamespaceLister
	SiloListerExpansion
}

// siloLister implements the SiloLister interface.
type siloLister struct {
	indexer cache.Indexer
}

// NewSiloLister returns a new SiloLister.
func NewSiloLister(indexer cache.Indexer) SiloLister {
	return &siloLister{indexer: indexer}
}

// List lists all Silos in the indexer.
func (s *siloLister) List(selector labels.Selector) (ret []*v1alpha1.Silo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Silo))
	})
	return ret, err
}

// Silos returns an object that can list and get Silos.
func (s *siloLister) Silos(namespace string) SiloNamespaceLister {
	return siloNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SiloNamespaceLister helps list and get Silos.
type SiloNamespaceLister interface {
	// List lists all Silos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Silo, err error)
	// Get retrieves the Silo from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Silo, error)
	SiloNamespaceListerExpansion
}

// siloNamespaceLister implements the SiloNamespaceLister
// interface.
type siloNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Silos in the indexer for a given namespace.
func (s siloNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Silo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Silo))
	})
	return ret, err
}

// Get retrieves the Silo from the indexer for a given namespace and name.
func (s siloNamespaceLister) Get(name string) (*v1alpha1.Silo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("silo"), name)
	}
	return obj.(*v1alpha1.Silo), nil
}
