// This file was automatically generated by lister-gen

package v1alpha1

import (
	"github.com/lwolf/kubereplay/pkg/apis/kubereplay/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HarvesterLister helps list Harvesters.
type HarvesterLister interface {
	// List lists all Harvesters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Harvester, err error)
	// Harvesters returns an object that can list and get Harvesters.
	Harvesters(namespace string) HarvesterNamespaceLister
	HarvesterListerExpansion
}

// harvesterLister implements the HarvesterLister interface.
type harvesterLister struct {
	indexer cache.Indexer
}

// NewHarvesterLister returns a new HarvesterLister.
func NewHarvesterLister(indexer cache.Indexer) HarvesterLister {
	return &harvesterLister{indexer: indexer}
}

// List lists all Harvesters in the indexer.
func (s *harvesterLister) List(selector labels.Selector) (ret []*v1alpha1.Harvester, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Harvester))
	})
	return ret, err
}

// Harvesters returns an object that can list and get Harvesters.
func (s *harvesterLister) Harvesters(namespace string) HarvesterNamespaceLister {
	return harvesterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HarvesterNamespaceLister helps list and get Harvesters.
type HarvesterNamespaceLister interface {
	// List lists all Harvesters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Harvester, err error)
	// Get retrieves the Harvester from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Harvester, error)
	HarvesterNamespaceListerExpansion
}

// harvesterNamespaceLister implements the HarvesterNamespaceLister
// interface.
type harvesterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Harvesters in the indexer for a given namespace.
func (s harvesterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Harvester, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Harvester))
	})
	return ret, err
}

// Get retrieves the Harvester from the indexer for a given namespace and name.
func (s harvesterNamespaceLister) Get(name string) (*v1alpha1.Harvester, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("harvester"), name)
	}
	return obj.(*v1alpha1.Harvester), nil
}
